# GitHub Actions工作流示例
# 这个文件展示了如何在CI中使用build_api_docs.py脚本

name: Update API Documentation

on:
  push:
    branches: [ main, master ]
    paths:
      - 'camel/**/*.py'  # 只在camel目录下的Python文件变化时触发
  pull_request:
    branches: [ main, master ]
    paths:
      - 'camel/**/*.py'

jobs:
  update-docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 获取完整历史，用于检测变更
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install -e .
        pip install pydoc-markdown
    
    - name: Generate API documentation (incremental)
      run: |
        # 增量更新：只处理最近24小时内修改的模块
        python docs/mintlify/build_api_docs.py \
          --incremental \
          --since_hours 48 \
          --output_dir docs/mintlify/reference \
          --mint_json docs/mintlify/mint.json
    
    - name: Generate API documentation (full - only on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # 完整更新：每周在main分支上做一次完整更新
        python docs/mintlify/build_api_docs.py \
          --clean \
          --output_dir docs/mintlify/reference \
          --mint_json docs/mintlify/mint.json
    
    - name: Check for changes
      id: verify-changed-files
      run: |
        if git diff --quiet docs/mintlify/; then
          echo "No documentation changes detected"
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "Documentation changes detected"
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/mintlify/
        git commit -m "docs: update API documentation [skip ci]"
        git push

---

# 本地开发使用示例

# 1. 完整重新生成所有API文档
python docs/mintlify/build_api_docs.py --clean

# 2. 只更新最近修改的模块（适合开发时快速更新）
python docs/mintlify/build_api_docs.py --incremental --since_hours 2

# 3. 只更新mint.json配置（如果已有文档文件）
python docs/mintlify/build_api_docs.py --skip_generation

# 4. 生成特定包的文档
python docs/mintlify/build_api_docs.py --package camel.agents

# 5. CI中的典型用法
python docs/mintlify/build_api_docs.py --incremental --since_hours 24 